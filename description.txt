Configuring your React Application:
1. Configure your React Project to use Reactstrap:
   Reactstrap is a package supporting easy to use React based Bootstrap 4 components.
   To configure your project to use reactstrap, type the following at the prompt to install reactstrap, and Bootstrap 4:
   yarn add bootstrap@4.0.0
   yarn add reactstrap@5.0.0
   yarn add react-popper@0.9.2

2. Configure to use Bootstrap 4:
   Next, open index.js file in the src folder and add the following line into the imports before the import of index.css(to apply custom css on bootstrap styles):
   import 'bootstrap/dist/css/bootstrap.min.css';

3. Adding a Navigation Bar:
   Open App.js in the src folder and update it as follows:
   import { Navbar, NavbarBrand } from 'reactstrap';

class App extends Component {
  render() {
    return (
      <div className="App">
        <Navbar dark color="primary">
          <div className="container">
            <NavbarBrand href="/">Ristorante Con Fusion</NavbarBrand>
          </div>
        </Navbar>
      </div>
    );
  }
}

Exercise (Instructions): React Components Part 1:
In this exercise we added a new component to our React application,
added data to its
and then updated the app to show the information in the web page.

Exercise React Components Part 2
n this exercise we added a new component to our React application,
added data to its class,
and then updated the app to show the information in the web page.

React Components Week 2:
In this exercise we learned how to structure the app into presentational and container components.
1. Enable your presentational components to be concerned with the look and feel of your app
2. Enable container components to deal with the state, provide the data and handle user interactions.

React life cycle methods:
1. getSnapshotBeforeUpdate => This may be needed in situations, for example, when you're scrolling, you have this scrollbar in a component
and you're scrolling and you want to remember the position of the scroll at the point
so that when the component re-renders then you will retain that scrolling position, then that would be useful for saving the information.

Exercise: Functional Components:
We reimplemented both the MenuComponent and DishdetailComponent as pure functional components.

Exercise: Header and Footer:
n this exercise we updated the React application to use Font Awesome and Bootstrap Social,
and also integrated two new components, Header and Footer, into our application.
First use yarn or npm to fetch Font Awesome and Bootstrap-social to the project by typing the following at the prompt:

yarn add font-awesome@4.7.0
yarn add bootstrap-social@5.1.1

Then, open index.js file and update it as follows to enable your application to use Font Awesome and Bootstrap Social:

import 'font-awesome/css/font-awesome.css';
import 'bootstrap-social/bootstrap-social.css';

Then add Header and Footer components.

Exercise React Router:
n this exercise we learned about installing, configuring and using the React Router for navigation within our React app:

Objectives and Outcomes:
In this exercise we learn to use the React Router to configure and set up navigation among various pages in a React application. At the end of this exercise you will be able to:

Install and configure your application to use React Router
Configure the routes for React router to enable you to navigate to various pages within your React application
1.Installing and Configuring React Router
  First install React Router into your project by typing the following at the prompt:
  yarn add react-router-dom@4.2.2
  Then, open App.js and update it as follows:
  import { BrowserRouter } from 'react-router-dom';

. . .

    <BrowserRouter>
      <div className="App">
        <Main />
      </div>
    </BrowserRouter>
. . .

Add a Home Component:

Create a new file named HomeComponent.js in the components folder and add the following to it:

import React from 'react';

function Home(props) {
    return(
      <div className="container">
        <h4>Home</h4>
      </div>
    );
}

export default Home;

Configuring the Router
Open MainComponent.js file and update it
Open HeaderComponent.js and update its contents
Then, open FooterComponent.js and update it
Open MenuComponent.js and remove the onClick() from the Card in the RenderMenuItem() function.
Save all the changes and do a Git commit with the message "React Router".

Exercise: Single Page Applications:
In this exercise we will:
1. Leverage the React router to enable the development of single page applications
2. Provide a way of navigating among various pages using the React router support.
3. Integrate the DishdetailComponent into our single page application. We will use a route parameter in the URL to pass in the details of the selected dish to the DishdetailComponent. At the end of this exercise we will be able to configure the routes in our React router configuration to enable the use of route parameters within the URL to pass information to a component.

Assignment 2 ReactRouter and Single Page Applications:

Objectives and Outcomes:
1. Integrated the AboutComponent given above into the single page application.
2. Added a new functional component named <RenderLeader> through the RenderLeader() function to AboutComponent.js that renders the details of a given leader using the reactstrap <Media> component.
3. Construct and render the list of leaders in the About Us page using the <RenderLeader> component implemented above.

Exercise Controlled Forms:
In this exercise we have learnt how to create a controlled form within our React application.

Exercise Controlled Form Validation:
In this exercise you have learnt about doing simple client site form validation for controlled forms in React.

Exercise: Uncontrolled Forms:
n this exercise we learnt to use an uncontrolled component approach to add a form to our React application.

1. Adding a Modal to Host the Form
2. Then, add a button to the Navbar to enable toggling the modal
3. Adding the Uncontrolled Form to the modal body
4. Then, add the handleLogin function to the class to handle the form submission
In order to retrieve form elements data from dom into our react appliation, we use ref attribute.Since we are using reactstrap and it also uses ref attribute for some other purpose, we will use innerRef to  help React differentiate it from reactstrap ref.

Description Forms Controlled vs Uncontrolled components:
Normally, form elements in HTML maintain their own state within DOM and update it based on user input.
A Controlled component makes the React component itself control the form that it renders.
That is, it way of setting up forms in your React Application whereby your form information is directly tied into the state of your React component that is hosting the form instead of DOM.
So, any changes that you make to your form imports will be immediately reflected into the state of your React component.
The ContactComponent in our app is a controlled component.
Uncontrolled forms:
Ideally whenever we implement forms within out react application, we should implement them inside controlled components.
But there are many situations where we may not wish to go through all the expensive set up that we did for the control forms in the control components.
And also there may be situations where we may wish to just let the form information be handled by the DOM itself
As we realize any HTML form elements state is already tracked by the DOM.
So maybe in simple setup, we would be happy with letting the DOM track the form state, and then retrieve that directly from the form.
So how do we retrieve this information?
Now every, DOM form element has a ref associated with it, from which we can easily use that to extract their HTML form data into our application.
We need to tie in a function there to enable us to retrieve that information into our application.
Now this approach of using uncontrolled forms is a lot more easier in situations when we are mixing our React application code with non-React code.
So maybe we have a project that is already setup with some non-React part, and then we're adding in React components or React elements to that project to set up some parts of the project.
In that case, setting up uncontrolled forms where it interacts with the rest of your non-React code is more easier.

Exercise (Instructions): Introduction to Redux
In this exercise we learned to install and configure Redux and use it in your React application.

1 First install Redux and React-Redux into our application.
  yarn add redux@3.7.2
  yarn add react-redux@5.0.7

2. Next, create a folder named redux in the src folder and then add a file named reducer.js
3. Then, add a file named configureStore.js in the redux folder
4. Next, open App.js and update it.
5. Finally, update MainComponent.js to connect it to Redux store and use it.

React Redux Forms:
The react-redux-form provides us with a lot of features that enable us to leverage redux for our form persistence and also form validation.
What exactly is React-Redux-Form?
It is a versatile, fast and intuitive library for creating complex and performant forms in React using Redux.
The React-Redux-Form itself persist the state of our form into a model in the redux store.
And React-Redux-Form also provides a collection of reducer creators and action creators for us that enables us to do all this work for us without writing much code.
Now that's where the React-Redux-Form takes care of all the grunt work behind persisting the form in the Redux store.
Why would you need that?
Say, for example, we are on a view and we're filling out a form and then we navigate out of the view.
Very often when we have standard react components, when we move out of a view, the state of the, whatever local state that you stored in that component will get destroyed.
And so when we return to the same view, if we had filled up a form, the form would remain unfilled.
Suppose we want to persist the state of the form even across page reloads or as we navigate in and out of a view,
then React-Redux-Form would be of use to us.
So, this is achieved by the form data being stored in the redux in a model.
And all the details of how this persistence is done is automatically taken care of by React-Redux-Form without us needing to do any reducer functions or the action creators on our behalf.
And also, React-Redux-Form brings in its own support for validation as we will see in one of the exercises that follows this lecture.
If we want to use React-Redux-Form purely for its form validation and not require the form data to be persistent in the redux store, instead if we want it to be persistent in the local state of the component, then we can simply use a local form that is also supported by React-Redux-Form to create forms.
This is suitable when we don't need persistence across component mounting/unmounting in our application. So, that's the advantage of using local forms.

Exercise (Instructions): React Redux Form
In this exercise we converted the controlled form that we created earlier into a form supported by react-redux-form.
1. We first install the react-redux-form into our project:
   yarn add react-redux-form@1.16.8
2. Then open ContactComponent.js and update the Feedback Form to use react-redux-form.

React Redux Form Validation
In this exercise we learned about implementing simple form validation in ContactComponent.js using react-redux-form.

React Forms and Redux Assignment:
In this assignment you will update the DishdetailComponent.js to include a form and do the form validation in code.
At the end of this assignment, you should have completed the following tasks to update the page:

1. Added a new class component named CommentForm to DishdetailComponent.js.
2. Provide a form to enable users to submit their comments
3. Validate the information entered by the users in the form

Assignment Requirements:

Task 1
In this task you will add a new class component named CommentForm. You need to complete the following:
Add a new class component named CommentForm that will add a button to the view as shown in the image below.
When the button is clicked, it toggles a modal that will display the comment form.
The CommentForm component is used by the RenderComments function to display the button for toggling the modal.

Task 2
In this task you will construct the form for users to submit their comments as shown in the image below. You need to complete the following:
Set up the form as a local form using the react-redux-form with the three fields: author, rating and comment.
The rating field in the comment form is implemented using a select, the author is implemented using a text field, while the comment uses a textarea with six rows.

Task 3
In this task, you will enable form validation as shown in the images below. You need to complete the following:
The author field should at least be three characters long.
The author field should be less than or equal to 15 characters.
The user should be alerted by showing the invalid message displayed at the bottom of the field.
