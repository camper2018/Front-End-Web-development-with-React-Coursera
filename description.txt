Configuring your React Application:
1. Configure your React Project to use Reactstrap:
   Reactstrap is a package supporting easy to use React based Bootstrap 4 components.
   To configure your project to use reactstrap, type the following at the prompt to install reactstrap, and Bootstrap 4:
   yarn add bootstrap@4.0.0
   yarn add reactstrap@5.0.0
   yarn add react-popper@0.9.2

2. Configure to use Bootstrap 4:
   Next, open index.js file in the src folder and add the following line into the imports before the import of index.css(to apply custom css on bootstrap styles):
   import 'bootstrap/dist/css/bootstrap.min.css';

3. Adding a Navigation Bar:
   Open App.js in the src folder and update it as follows:
   import { Navbar, NavbarBrand } from 'reactstrap';

class App extends Component {
  render() {
    return (
      <div className="App">
        <Navbar dark color="primary">
          <div className="container">
            <NavbarBrand href="/">Ristorante Con Fusion</NavbarBrand>
          </div>
        </Navbar>
      </div>
    );
  }
}

Exercise (Instructions): React Components Part 1:
In this exercise we added a new component to our React application,
added data to its
and then updated the app to show the information in the web page.

Exercise React Components Part 2
n this exercise we added a new component to our React application,
added data to its class,
and then updated the app to show the information in the web page.

React Components Week 2:
In this exercise we learned how to structure the app into presentational and container components.
1. Enable your presentational components to be concerned with the look and feel of your app
2. Enable container components to deal with the state, provide the data and handle user interactions.

React life cycle methods:
1. getSnapshotBeforeUpdate => This may be needed in situations, for example, when you're scrolling, you have this scrollbar in a component
and you're scrolling and you want to remember the position of the scroll at the point
so that when the component re-renders then you will retain that scrolling position, then that would be useful for saving the information.

Exercise: Functional Components:
We reimplemented both the MenuComponent and DishdetailComponent as pure functional components.

Exercise: Header and Footer:
n this exercise we updated the React application to use Font Awesome and Bootstrap Social,
and also integrated two new components, Header and Footer, into our application.
First use yarn or npm to fetch Font Awesome and Bootstrap-social to the project by typing the following at the prompt:

yarn add font-awesome@4.7.0
yarn add bootstrap-social@5.1.1

Then, open index.js file and update it as follows to enable your application to use Font Awesome and Bootstrap Social:

import 'font-awesome/css/font-awesome.css';
import 'bootstrap-social/bootstrap-social.css';

Then add Header and Footer components.

Exercise React Router:
n this exercise we learned about installing, configuring and using the React Router for navigation within our React app:

Objectives and Outcomes:
In this exercise we learn to use the React Router to configure and set up navigation among various pages in a React application. At the end of this exercise you will be able to:

Install and configure your application to use React Router
Configure the routes for React router to enable you to navigate to various pages within your React application
1.Installing and Configuring React Router
  First install React Router into your project by typing the following at the prompt:
  yarn add react-router-dom@4.2.2
  Then, open App.js and update it as follows:
  import { BrowserRouter } from 'react-router-dom';

. . .

    <BrowserRouter>
      <div className="App">
        <Main />
      </div>
    </BrowserRouter>
. . .

Add a Home Component:

Create a new file named HomeComponent.js in the components folder and add the following to it:

import React from 'react';

function Home(props) {
    return(
      <div className="container">
        <h4>Home</h4>
      </div>
    );
}

export default Home;

Configuring the Router
Open MainComponent.js file and update it
Open HeaderComponent.js and update its contents
Then, open FooterComponent.js and update it
Open MenuComponent.js and remove the onClick() from the Card in the RenderMenuItem() function.
Save all the changes and do a Git commit with the message "React Router".

Exercise: Single Page Applications:
In this exercise we will:
1. Leverage the React router to enable the development of single page applications
2. Provide a way of navigating among various pages using the React router support.
3. Integrate the DishdetailComponent into our single page application. We will use a route parameter in the URL to pass in the details of the selected dish to the DishdetailComponent. At the end of this exercise we will be able to configure the routes in our React router configuration to enable the use of route parameters within the URL to pass information to a component.

Assignment 2 ReactRouter and Single Page Applications:

Objectives and Outcomes:
1. Integrated the AboutComponent given above into the single page application.
2. Added a new functional component named <RenderLeader> through the RenderLeader() function to AboutComponent.js that renders the details of a given leader using the reactstrap <Media> component.
3. Construct and render the list of leaders in the About Us page using the <RenderLeader> component implemented above.

Exercise Controlled Forms:

In this exercise we have learnt how to create a controlled form within our React application.