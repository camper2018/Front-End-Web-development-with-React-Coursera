We begin to realize that web applications are no longer standalone.
We always have a, "Cloud" backend supporting your web application.
Now these days, everything is on the cloud.
Pretty soon, you will be on the cloud, too, at least on cloud nine with a silver lining.
But given that we need a server-side support for our React application to work correctly, where would you host the server?
And these days, hosting the server is very easily done by using one of the cloud-based infrastructure services, things like the Amazon Web Services or Heroku or DigitalOcean or many others that provide cloud-based server support.
So on the server side, what exactly is available on the server side? You typically have a server front-end that is talking to your React application.
So that is the server logic, and behind the scenes, the server logic is communicating with a persistent storage like a database where your data is stored and retrieved from.
When you enter the networking world, you'll be pretty soon bombarded with 304 little acronyms, things that you thought you knew what they were from normal English but they have an entirely different meaning and purpose when you encounter them in the networking world.
So, let's examine a few of them.
So in the networking world, you will hear people talking over HTTP protocol, the protocol that is used for communicating between the client and the server.
This is an application layer protocol that we will briefly talk about a little more in the rest of this lecture.
The HTTP protocol, for it to work, needs a URL to be supplied to it, the Uniform Resource Locator.
So this is a string of characters separated by slashes with an http: or an https: attached in front of it.
And I'm sure, if you have used the World Wide Web, you are pretty familiar with what the URLs look like.
Now in addition, you would hear people talking about JSON, not your friend Jason, but The JavaScript Object Notation.
So the JavaScript Object Notation is one way of encoding data that is being shipped from the server side to the client side or vice versa.
And also, you will hear people talking about XML, yet another way of encoding data while it is in transit shipment between the client and server side.
Now also, you will hear people talking about higher level protocols called SOAP, not the kind that you take a shower with, but SOAP as a protocol that allows communication between distributed entities within the network.
And also, you will hear people talking about REST.
Not something that you get too much going through this particular course, REST or Representational State Transfer.
I will have a shorter lecture specifically devoted to REST a little bit later in this module.
And in the HTTP world, you would hear people talking about get, put, post, and delete, and you'd be wondering, what do they all mean?
Let's learn a little bit about these in this lecture and also the lecture on REST that you will see a little bit later.
One important thing that you need to understand when you are communicating with a server is that the client server communication causes unexpected amount of delays or indeterminate amount of delay while the data is being either fetched or uploaded to the server from the client side.
So, which means that within your client side application, you need to keep the user informed over the fact that something is going on behind the scenes and be able to handle the delays and possibly not being able to obtain the data from the server side.
It is quite possible that when you try to connect to a server, the connection to the server may fail, the server may return incorrect data or may cause an error in communication.
All these have to be handled on your client side appropriately so that your application will still keep functioning even in the presence of these problems.
Jumping into the most popular application layer protocol used for communicating between the client and the server, the Hypertext Transfer Protocol.
This is a client server communication protocol that may or may not make much sense to you unless you have sufficient background in networking, but this is a protocol that is used for encoding the messages that you exchange between your client application and a server side.
So this HTTP protocol allows you to retrieve hypertext-based documents from the server side. Increasingly, the information being downloaded from the server side is encoded in one of the standard encoding formats like JSON or XML.
And in order to be able to talk to a server, you have the support from various HTTP actions or what we refer to as HTTP verbs, the head, get, post, put, delete, trace, options, and connect.
We will see in particular the get, put, post, and delete verbs in more detail when we examine the REST API protocol a little bit later.
How does the HTTP protocol work? In the HTTP protocol, you are sending a request from your client application to the server, and this is encoded in the form of an HTTP request message.
The request message typically carries a URL in the request message indicating what is it that you want the server side to send it to you.
And this is typically a get message if you want data to be downloaded from the server side, and you will also specify which particular server you are communicating with.
When the server receives your request, the server will retrieve the data from its data storage, typically a database on the server side, and then package this data in an appropriate format and send the data back to you on your client side.
If you are obtaining standard HTML, CSS, and JavaScript code from the server side, then your browser is able to render this. But with applications like Angular, you are primarily connecting to the server and then retrieving data in the form of either JSON or XML most of the time, except for the initial download of all the resources that are required for your application to be executed within your browser.
So, as we saw earlier, the HTTP application requires messages to be sent between the client and the server. A request message is typically sent from the client to the server and the request message consists of a request line plus a bunch of headers where you supply additional information to qualify the request.
We will see the use of various headers and settings in the headers as we go through some of the exercises in this particular module.
The request line and headers are separated from the body of the request message by one blank line.
The body of the message may contain additional data especially if your client is sending data over to the server side.
For example, when you submit a form, the information within the form is encoded into a JSON format and then sent over to the server side from the client side.
So that would be done using either post or a put message.
Looking at the little more details of the HTTP request message, the typical request message in the request line will contain the method which is either get, put, post, delete, or some of the other verbs that you have seen earlier, and then followed by the URL and the version of the HTTP protocol that you're using for communicating from the client to the server side.
The header field usually contains a Header Field Name: and the value for that header field, and the body contents, as I mentioned, could be encoded in either JSON or XML format. Here is an example of a typical HTTP request message that may be sent to the server from the client.
So in this particular request message, we are asking the server to return the index.HTML page from the server side to the client side so that it can be rendered in the browser on the client site.
A request like this would typically have an empty body in the request message. Most of the information will be encoded in the request line plus the headers of the request message.
When the client sends the request to the server, the server will process the request and then send back a reply to the client side.
The reply message is organized into, again, three parts: a status line with some information about how the request has been processed and what is being sent back to the plant is stored, the headers will contain additional details of what is contained in the response message, and then followed by a blank line and then the actual body of the message.
An example of what would be typically contained in an HTTP response message. In this case, this response message is coming back with a 200 which is a status code of the message.
If you see a 200 in the request line as a status code, it means that your request was successful and the server is able to return the data that you have requested from the server side.
And then, the header will contain additional directions to the client side including information about how the actual body of the message is encoded. Then, if you have requested the index.HTML page, the body of the message will contain the HTML code for the index.HTML page, as you'll see in this example here.
One of the pieces of information in the status line that I referred to as the status code, if the server is able to process your request correctly, it'll send back a reply with a status code of 200, meaning everything is okay on the server side and the server side is returning the data correctly.
If the server is unable to process the request for whatever reason, then that information will be encoded in the status code in the status line of the reply message. The various status codes, typically, that you will encounter when you receive a reply from the server side include a 201 which means that when you tried to create an object on the server side, it had been successful created, or a 301 which means that whatever you are requesting has moved permanently to a new location and the URL of the new location of that resource will be returned to your client side; 400s and 500s typically indicate that there was some problem on the server side.
A 404 is something that you often encounter when you request for something that doesn't exist on the server side. Similarly, 500 means that the server is just giving up.
It is unable to process your request and then sends back an internal server error. These are two common error codes that you will encounter. The remaining ones have specific meaning as listed in this table here.
There are more than the status codes that I give you in this table but these are some of the most common status codes that you will encounter in a reply message coming from the server side. Another point that I mentioned is the fact that the server may encode the data in a specific format like XML, or Extended Markup Language, or JSON, the JavaScript Object Notation format.
Now typically, in this particular course, we will be dealing with data that is encoded mainly in JSON. Most client-side applications including mobile applications these days typically communicate with the server and the data exchange format is JSON by default and in most cases.
What is the reason? I will spend a few minutes explaining to you about JSON.
The JavaScript Object Notation or JSON is a light way to data interchange format. The reason the JSON data format is specifically of interest to us in this course is because the JavaScript Object Notation, as the name implies, very easily maps into a JavaScript object that you use within your JavaScript code.
So converting a JavaScript object into JSON notation and vice versa is very straightforward. The JSON notation is what we call as a self-describing and very easy to understand notation.
In the JavaScript Object Notation format, the data data is structured in a very clean, specified manner. This is structured as a collection of name value pairs and this is structured as an ordered list of values. You can see an example of this on the right-hand side here. Now, you see why the data is structured that way and you also realize that it is very easy to be able to deal with that data within your JavaScript code in your application.
With this, I complete a quick overview of networking essentials. We'll now move on to an exercise where we will set up a rudimentary server that will serve up some data that we can connect to from our application and then exchange data with a server.
Now, we will develop a full-fledged server in one of the later courses, the NodeJS and Server-side Development course that would come as a last course in this specialization.

Brief Representational State Transfer (REST):


Coursera

Front-End Web Development with React
Week 4
Brief Representational State Transfer (REST)
Prev
Next
Brief Representational State Transfer (REST)



Let me give you a brief REST.
What I meant to say was, let me give you a brief overview of Representational State Transfer.
What exactly is REST? How do we make use of it in our React application?
And how do we make use of this to communicate with the server?
How does a server support REST API? And how do we access that REST API from our React application?
Let's talk about that a little bit more in this lesson.
I'm sure you've heard the term web services being mentioned in the IT world very often.
What exactly are web services? Web services are a way of designing systems to support interoperability among systems that are connected over a network, like the Internet as we see today.
This is what we refer to as a service-oriented architecture.
Now, what this means is that you provide a standardized way for two machines that are connected to Internet to be able to communicate with each other at the application layer level for web-based applications using open standards.
Now, I have used a lot of jargon there. Let's try to break them down and understand a little bit about each of that in this lecture.
Two common approaches that are used for supporting web services are SOAP, the Simple Object Access Protocol, based web services which uses the Web Services Description Language for specifying how the two endpoints communicate with each other.
And typically, SOAP is based on using XML as the format for the messages being exchanged between the two endpoints.
Representational State Transfer, or REST, also uses web standards, but the exchange of data between the two endpoints could be either XML or, increasingly, using JSON as the format.
The REST way of interoperability is simpler compared to SOAP, and hence, REST has found a lot wider deployment in the web services world.
Typically, client server communication is facilitated using REST, where the server supports the REST API and the client can then invoke the REST API endpoints in order to obtain information or to upload information to the server.
Again, I have mentioned the word invoke the REST API endpoints. So these are a few terms that I have used. Let's clarify some of these in the next few slides.
Representational State Transfer is a style of software architecture that is specially designed for distribution hypermedia over the World Wide Web.
Now, this was first introduced by Roy Fielding in his PhD thesis. Now, this is one of those PhD thesis that actually produced something useful for the world.
So, this has found, again, a lot of traction in the web services world. This is a collection of network principles that outline how resources can be made available on servers and these resources can be accessed from clients by identifying the resources using REST API endpoints.
Within Representational State Transfer, there are four basic design principles.
First and foremost, REST is built upon HTTP protocol, so it uses all the HTTP methods that we have already seen in the previous lesson.
Second, REST is designed to be stateless, meaning that the server doesn't store any information about the state after the communication is complete.
So, when a server receives the request, the server replies, and then after that, it doesn't remember anything more about that conversation between the client and the server.
Third, the REST way of providing resources is to expose a directory structure like URLs, Uniform Resource Locators, URLs.
And fourth, the format for data exchange is typically JSON or XML or both that can be supported using the REST.
One of the motivations for why suggesting REST as a way for supporting web services is that it captures all the things that are good about the World Wide Web and that made the World Wide Web successful, the use of Uniform Resource Indicators or Uniform Resource Locators, URLs, which allow you to address resources by specifying them as a URL.
The second one being a protocol that rides on top of HTTP protocol, HTTP has already found wide deployment in the Internet.
Third, the request-response cycle that HTTP is well-known for. So you send a request, the server receives your request, process the request, send the response to the request, and the client receives the response, acts upon that, and may generate further requests.
So, this approach of the request-response cycle is very well established with HTTP and the World Wide Web.
Now, the HTTP protocol as we have seen earlier, we will use all the various verbs that HTTP provides, specifically the get, put, post, and delete, for being able to specify operations to be done on resources that are stored on the server side.
So for example, if you do an HTTP get request, you're asking for the server to return the resource.
If you do a post request, you're asking for the server to create a new resource. If you do put request, you're asking for the server to update an existing resource, and if you issue a delete request, you are asking for the server to delete the resource that is identified by the particular URL.
Also, it tries to preserve idempotence. Some operations, when they are performed even repeatedly, will not cause any change of state.
Some other operations, if you do them successively, they may cause a change of state. So you need to be careful about which operations can be repeated without any damaging consequences and which have to be very carefully done.
In the REST world, you often hear people talking about nouns, verbs, and representations. Now, I will clarify each one of these in a little more detail in the next few slides.
Nouns specifically refer to resources, and these are resources are usually identified by their URLs and these are unconstrained.
Verbs are constrained and these specify the actions to be done on the resources. And representations, as we see, when the information needs to be conveyed from the server to the client or from the client or the server, how you encode the information, typically, either using JSON or using XML.
Resource is the key abstraction that REST works a lot. So, the information is abstracted in the form of a resource, and the resource is identified by specifying it by using a URL.
So, any information that can be encapsulated and be made available can be identified as a resource.
 A piece of information like the current weather in Hong Kong could be a resource. An image could be a resource.
 A stock price information could be a resource, and so on. So whatever you define as a piece of information that a client may be interested in can be identified as a resource.
 You can even deal with resources as collection of resources that the server may send up to the client.
 An example of how you name resources is illustrated here. So, we use URIs to identify resource.
 A quick reading of this specification or the URIs here will easily enable you to understand what we're referring to by using these URIs.
 So, for example, something which ends with a dishes/, you automatically assume that this is referring to a collection of dishes, but dishes/123, for example, might mean dish number 123 in this case, and so on.
 So, it is very easy to say that you can specify a collection of resources and be able to identify them as a collection and then download them as a collection or you can identify an individual resource and say that you want that particular resource.
 Now, these resources can be organized into a hierarchy of the specification of this URI.
 So, as you traverse the park, you go from the more general to the more specific of the resource.
This directory structure enables you to identify the resources that you'll use or provide from your server side very easily.
The second part of the REST API are the verbs. In particular, we are interested in the four verbs of HTTP, the get, put, post, and delete.
In this case, these verbs will be mapped into actions that we want to be performed on the resource on the server site.
A get would mean you want to perform a read operation of the resource, so which means that a client sending a get request is indicating to the server that it wants to obtain a representation of the resource from the server side to the client side.
A post means that you want to create a new resource and then you will specify the details of the resource in the representation that is used for specifying the resource and then send that information over to the server side, so that the server will create that resource on your behalf.
A put would be modification of resources, and delete, as you would expect, is deletion of the resources. So as you can see, the four verbs, get, post, put, and delete are mapped into the four CRUD operations that you can carry out on a database that stores these resources on the server side, the read, create, update, and delete operations.
Elaborating further, the HTTP get is a way of specifying that you want the information or the representation of the resource to be returned to the client from server side.
So when you issue a get request to a recipe endpoint, you are asking for either a collection of resources represented by that URI, or a specific resource which is identified by the ID of that particular resource, specified within the URL.
So as you see, in this example, if you say dishes/452, you're meaning to say that dish number 452 with the ID 452 should be returned to the client side.
Similarly, the post operation, as we saw, is used to create a resource.
So when you create the resource, the content of describing that resource would be in the form of a JSON representation or an XML representation and that'll be included in the body of the request message that is sent to the server side. So, a post operation expects a representation of the resource in either JSON or XML format in the body of the request message.
When the server receives the request message, the server creates that resource on the server side and then returns either a confirmation or a error to indicate that the resource creation failed.
Similarly, a put operation is used to update a resource. When you do a put operation on a resource on the server side, you may send back the modification either by specifying only the partial modification that you want to effect on the particular resource in the body of the reply message or you may send the complete representation of the resource in the body of the message.
Depending on the arrangement between the client and the server, the server expects the information to be passed on in the body of the request message.
The delete operation, as you would expect, deletes the existing resource.
Now in this particular case, of course, a delete operation would be idempotent because if you tried to delete a resource and if the resource exists, it'll be deleted.
If you tried to delete a not existing resource, it won't cause any further modification to the server side except that the server will reply with an error saying that the resource doesn't exist.
But nevertheless, delete is an example of an idempotent operation in this case.
Similarly, the get operation is also an idempotent operation because it is not making any modification to the resource on the server side.
Post and put, of course, are going to modify the resource on the server side, either create a new resource or modify an existing resource on the server side.
And of course, the representations. As I have been emphasizing, the two common formats for representing is either JSON or XML.
The last part that we need to emphasize is the server side should be completely stateless, which means that the server side does not track the client state because if the server needs to track client's state, it will not be scalable.
So, for a scalable implementation of the server side, you normally use a stateless server on the server side.
So every request that the client sends to the server will be treated as an independent request and will not reflect upon previous requests that have already been handled by the server from that particular client.
So, it's the responsibility of the client to track it's own state, either in the form of using cookies or using a client side database, whatever means that is suitable.
Now, this approach where the client tracks it's own state is a lot more scalable because your client will be responsible for tracking its own state.
And this is where the client-side MVC set up helps us in this regard.
And finally, we are not yet done with REST.
We will see more of REST in the exercises that follow in this particular lesson.
And then also, we will see more details about REST usage in the rest of this.

Promises:

A promise is a mechanism that supports asynchronous computation.
The promise provides a mechanism or a proxy for a value that is not available at the moment that you asked for it.
So a promise will return a promise to you saying that when the result becomes available it'll come back and deliver the results to you.
So, a promise returns a proxy object to you and you hold onto the proxy object and that proxy object will give you access to the results when they become available.
There is a method in how you wait for the results.
You actually don't suspend your computation at that point instead, you configure a way of accepting the results when it comes back from the promise.
To put it in a nutshell, promise represents a value that would be available at a future time.
It may be also immediately available in which case the promise will return the value immediately.
But in case it needs to return a value at a future date then it gives you the promise that that value when it becomes available, will be returned to you.
There's always the possibility that the promise cannot be met because the results are unavailable for whatever reason.
In that case, an error will be delivered to you, or a reject will be delivered to you and it is up to you to deal with the fact that the promise was rejected.
So, a promise when it is given to you will be in the pending state.
Now, when the promise resolves, that is the results become available and the promise is able to deliver the results to you, then the promise will resolve or will fulfill.
In that case, the promise will move from the pending state to that resolved or the fulfilled state.
So at that point, your results are available to you.

when the promise is returned then the return promise is available to you as an object, and this promise provides two methods,.then and the.catch method.
Now, then the promise is successfully resolved, then their promise will result in calling a resolve.
As you saw the promise is constructed and inside the promise you have the function that resolve and reject as the two parameters.
So if the promise is successfully able to deliver the result, then it'll call the resolve method and then return the result to you.
Where does the result get delivered to you? When you write code waiting for the promise then you would specify what to do when the promise returns the result in that then option for the promise.
If the promise is not able to resolve correctly then it will reject with the error being sent back to you, the error being another object that will be sent back to you.
So, when the promise gets rejected, then you deal with that rejection using a "Catch" within your code.
So, within the catch you will provide a function that will deal with the error.
For example, you may simply output the error message, the console log and deal with the error that way, or you might have a more elaborate way of handling the errors.
That will be provided in the catch option that you give for the promise code on your site, when the promise delivers a reject to you.
So, this is how the two sides of the coin deal with promises.
From one side you're sent the promise object and when you receive the promise object, with the promise object you would either do the then and the catch.
Promises provide a way of addressing the callback hell problem.
The other advantage of using promises is that promises can be chained.
A promise when delivers the result in the then(),  you can generate another promise in return and that promise can be dealt with by chaining another then method to that and so on.
So, you can chain a set of then methods together to deal with promises one behind other.
If the result is immediately available or if you are going to reject immediately then promise provides a method of immediately returning without waiting for their promise to either resolve or reject.
In that case, you would simply say Promise with the capital P as Promise.resolve() and Promise.reject(error), and then return either the result or the error immediately.

Fetch:
If you are familiar with how a browser application communicates with a server, earlier we had access to XMLHttpRequest, that was implemented in most browsers that enabled us to communicate to the server.
Now this is quite cumbersome and outdated already for modern day web applications.
And hence we would rather prefer in more modern or newer implementation of the communication protocols within our browser so that it can communicate with the servers.
Now, XMLHttpRequest has been successfully made use of by many JavaScript frameworks and libraries for communicating with the server like jquery AJAX.
And indeed that is still the go to approach for communicating between your browser and the server.
But there is a newer kid on the block, the Fetch API is proposed as a modern replacement for XMLHttpRequest.
Now, it is quite new and so some of the older or legacy browsers do not support it yet.
But the newer browsers are all beginning to support the Fetch API as part of the browser itself.
Now this provides an interface for fetching resources including from across the network.
That's indeed the purpose of Fetch.
And Fetch provides a more powerful feature set and more flexible feature set than what XMLHttpRequest provides.
Now, many of the JavaScript framework earlier wrapped the XMLHttpRequest in their own code and made it more palatable for use within those JavaScript framework.
So for example, with an Angular, React or Backbone jQuery of the AJAX method for example is all wrapping of the XMLHttpRequest.
Now Fetch API inherently supports promised based approach for communication.
Fetch supports promises inherently and that is what makes it valuable for use in communicating with a server.
Now when you talk about Fetch there are some abstractions that we need to be aware of.
In Fetch, a request represents a resource request.
And similarly, a response represents the response to the request that you send to the server.
Now the request and response are objects that you have access to and can manipulate it.
Similarly, the headers object represents the request/response headers.
Now you can query the headers, extract information, you can add headers to an outgoing request.
You can extract headers from the incoming response and make use of them within your JavaScript code.
In addition, the body itself is another object that is part of the Fetch API and it provides methods relating to the body of the response or the request message.
Now, you can declare the content type of the body, how the body should be handled.
You can even put information into the body.
You can extract the information of the body and so on, and that is all supported through Fetch API.
fetch (baseUrl + url endpoint)
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.log(error.message));
 The response object is a raw body in the response message. We can convert it in JSON format by .json() method.
Fetch Posting Data :

fetch (baseUrl + urlendpoint(eg. comments), {
  method: POST,
  body: JSON.stringify(newComments),
  headers: {
    Content-Type: application/json},
    credentials: same-origin
  })
}
Typically, the post request will result in the server sending back a copy of the resource that has been created on the server side if it is successfully done.
If there is an error, then obviously an error message will be returned to the client side.

Fetch Dealing with Errors:
fetch(baseUrl + 'dishes')
  .then(response => {
    if(response.ok) {
      return response;
    } else {
      var error = newError('Error' + response.status + ':' + reponse.statusText);
      error.response = response;
      throw error;
    }
  },
  error => {
    var errmess = newError(error.message);
    throw errmess;
  })
  .then(response => response.json())
  .then(data=> console.log(data))
  .catch(error => console.log(error.message));

When you throw the error, the .catch() will catch this error and then you can deal with it there appropriately.
So that's how you would handle the response from the server side.
Now if the server explicitly or if in communicating with the server you experience an error.
So which means that you never even managed to communicate with the server.
In that case, fetch will generate an error response and that is handled by giving a second callback function to the then.
Promises allow you to give two callback functions as parameters to the then.
The first callback function will be used when the promise resolves correctly.
The second callback function will be used when the promise is rejected.
So the error part is where the rejection of the promise is handled.
So if it is rejected, then you will create an error message from the error message and then throw an error at that point.
Some of the other libraries have a much better way of dealing with this.
And so some people prefer not to use fetch, but instead use some of the other libraries like axios.
If you are using fetch on browsers that don't have fetch already built in, then you can use a fetch polyfill that will be inserted.
Now cross-fetch is a an npm package that makes use of a fetch polyfill in situations where fetch is not inherently part of the browser implementation.
So, Cross-Fetch provides support for Fetch. You can use Cross-Fetch even on the server side for doing Fetch. So even within your Node just application, if you want to contact another server, you can use Fetch also, and Cross-Fetch supports that.
And then, this Cross-Fetch, if your browser doesn't have the Fetch built into it, then it will resort to using the whatwg-fetch polyfill.
The whatwg-fetch polyfill is a Implementation of the Fetch protocol, or the Fetch API, that can be put into browsers that don't have native support for Fetch.
And similarly, the Cross-Fetch will result using another npm package called node-fetch, which is used if you're using this in a Node application.
Now in our case, we are using it in our React application, and the Create-React app automatically includes cross-fetch into our React application, so we don't need to explicitly do anything for using that.
But, if we are using Cross-Fetch within our application, when we use Fetch, we may have to simply import Fetch from Cross-Fetch into that JavaScript module, and then make use of Fetch just like we use Fetch otherwise.

Fetch Alternatives:
1. Axios api
2. Superagent
Axios wraps XMLHttpRequest and exports a better API for use within your React application.
Now the Axios API seems better than Fetch API, or rather at least Axios gives a much higher level API than what Fetch gives.
And so, some people prefer to use that instead of Fetch.
Axios also supports things like automatically adding credentials and also adding interceptors.
Now in our course, we will use Fetch as the approach because Fetch also works very well with React native, that we will learn in the next course.